export const Magic = [0x00, 0x61, 0x73, 0x6d]

export const Version = [0x01, 0x00, 0x00, 0x00]

export const InstMap: Record<string, number> = {}

export const i32_op0 = [
  "load",
  "load8_s",
  "load8_u",
  "load16_s",
  "load16_u",
  "store",
  "store8",
  "store16",
  "const",
  "eqz",
  "eq",
  "ne",
  "lt_s",
  "lt_u",
  "gt_s",
  "gt_u",
  "le_s",
  "le_u",
  "ge_s",
  "ge_u",
  "clz",
  "ctz",
  "popcnt",
  "add",
  "sub",
  "mul",
  "div_s",
  "div_u",
  "rem_s",
  "rem_u",
  "and",
  "or",
  "xor",
  "shl",
  "shr_s",
  "shr_u",
  "rotl",
  "rotr",
  "wrap_i64",
  "trunc_f32_s",
  "trunc_f32_u",
  "trunc_f64_s",
  "trunc_f64_u",
  "reinterpret_f32",
  "extend8_s",
  "extend16_s",
] as const
export const i64_op0 = [
  "load",
  "load8_s",
  "load8_u",
  "load16_s",
  "load16_u",
  "load32_s",
  "load32_u",
  "store",
  "store8",
  "store16",
  "store32",
  "const",
  "eqz",
  "eq",
  "ne",
  "lt_s",
  "lt_u",
  "gt_s",
  "gt_u",
  "le_s",
  "le_u",
  "ge_s",
  "ge_u",
  "clz",
  "ctz",
  "popcnt",
  "add",
  "sub",
  "mul",
  "div_s",
  "div_u",
  "rem_s",
  "rem_u",
  "and",
  "or",
  "xor",
  "shl",
  "shr_s",
  "shr_u",
  "rotl",
  "rotr",
  "extend_i32_s",
  "extend_i32_u",
  "trunc_f32_s",
  "trunc_f32_u",
  "trunc_f64_s",
  "trunc_f64_u",
  "reinterpret_f64",
  "extend8_s",
  "extend16_s",
  "extend32_s",
] as const
export const f32_op0 = [
  "load",
  "store",
  "const",
  "eq",
  "ne",
  "lt",
  "gt",
  "le",
  "ge",
  "abs",
  "neg",
  "ceil",
  "floor",
  "trunc",
  "nearest",
  "sqrt",
  "add",
  "sub",
  "mul",
  "div",
  "min",
  "max",
  "copysign",
  "convert_i32_s",
  "convert_i32_u",
  "convert_i64_s",
  "convert_i64_u",
  "demote_f64",
  "reinterpret_i32",
] as const
export const f64_op0 = [
  "load",
  "store",
  "const",
  "eq",
  "ne",
  "lt",
  "gt",
  "le",
  "ge",
  "abs",
  "neg",
  "ceil",
  "floor",
  "trunc",
  "nearest",
  "sqrt",
  "add",
  "sub",
  "mul",
  "div",
  "min",
  "max",
  "copysign",
  "convert_i32_s",
  "convert_i32_u",
  "convert_i64_s",
  "convert_i64_u",
  "promote_f32",
  "reinterpret_i64",
] as const

export const i8x16_op0 = [
  "shuffle",
  "swizzle",
  "splat",
  "extract_lane_s",
  "extract_lane_u",
  "replace_lane",
  "eq",
  "ne",
  "lt_s",
  "lt_u",
  "gt_s",
  "gt_u",
  "le_s",
  "le_u",
  "ge_s",
  "ge_u",
  "abs",
  "neg",
  "popcnt",
  "all_true",
  "bitmask",
  "narrow_i16x8_s",
  "narrow_i16x8_u",
  "shl",
  "shr_s",
  "shr_u",
  "add",
  "add_sat_s",
  "add_sat_u",
  "sub",
  "sub_sat_s",
  "sub_sat_u",
  "min_s",
  "min_u",
  "max_s",
  "max_u",
  "avgr_u",
  "relaxed_swizzle",
  "relaxed_laneselect",
] as const
export const i16x8_op0 = [
  "splat",
  "extract_lane_s",
  "extract_lane_u",
  "replace_lane",
  "eq",
  "ne",
  "lt_s",
  "lt_u",
  "gt_s",
  "gt_u",
  "le_s",
  "le_u",
  "ge_s",
  "ge_u",
  "extadd_pairwise_i8x16_s",
  "extadd_pairwise_i8x16_u",
  "abs",
  "neg",
  "q15mulr_sat_s",
  "all_true",
  "bitmask",
  "narrow_i32x4_s",
  "narrow_i32x4_u",
  "extend_low_i8x16_s",
  "extend_high_i8x16_s",
  "extend_low_i8x16_u",
  "extend_high_i8x16_u",
  "shl",
  "shr_s",
  "shr_u",
  "add",
  "add_sat_s",
  "add_sat_u",
  "sub",
  "sub_sat_s",
  "sub_sat_u",
  "mul",
  "min_s",
  "min_u",
  "max_s",
  "max_u",
  "avgr_u",
  "extmul_low_i8x16_s",
  "extmul_high_i8x16_s",
  "extmul_low_i8x16_u",
  "extmul_high_i8x16_u",
  "relaxed_laneselect",
] as const
export const i32x4_op0 = [
  "splat",
  "extract_lane",
  "replace_lane",
  "eq",
  "ne",
  "lt_s",
  "lt_u",
  "gt_s",
  "gt_u",
  "le_s",
  "le_u",
  "ge_s",
  "ge_u",
  "extadd_pairwise_i16x8_s",
  "extadd_pairwise_i16x8_u",
  "abs",
  "neg",
  "all_true",
  "bitmask",
  "relaxed_trunc_f32x4_s",
  "relaxed_trunc_f32x4_u",
  "extend_low_i16x8_s",
  "extend_high_i16x8_s",
  "extend_low_i16x8_u",
  "extend_high_i16x8_u",
  "shl",
  "shr_s",
  "shr_u",
  "add",
  "sub",
  "mul",
  "min_s",
  "min_u",
  "max_s",
  "max_u",
  "dot_i16x8_s",
  "extmul_low_i16x8_s",
  "extmul_high_i16x8_s",
  "extmul_low_i16x8_u",
  "extmul_high_i16x8_u",
  "relaxed_trunc_f64x2_s_zero",
  "relaxed_trunc_f64x2_u_zero",
  "relaxed_laneselect",
  "trunc_sat_f32x4_s",
  "trunc_sat_f32x4_u",
  "trunc_sat_f64x2_s_zero",
  "trunc_sat_f64x2_u_zero",
] as const

export const f32x4_op0 = [
  "splat",
  "extract_lane",
  "replace_lane",
  "eq",
  "ne",
  "lt",
  "gt",
  "le",
  "ge",
  "demote_f64x2_zero",
  "ceil",
  "floor",
  "trunc",
  "nearest",
  "relaxed_madd",
  "relaxed_nmadd",
  "relaxed_min",
  "abs",
  "neg",
  "relaxed_max",
  "sqrt",
  "add",
  "sub",
  "mul",
  "div",
  "min",
  "max",
  "pmin",
  "pmax",
  "convert_i32x4_s",
  "convert_i32x4_u",
] as const

export const f64x2_op0 = [
  "splat",
  "extract_lane",
  "replace_lane",
  "eq",
  "ne",
  "lt",
  "gt",
  "le",
  "ge",
  "promote_low_f32x4",
  "ceil",
  "floor",
  "trunc",
  "nearest",
  "relaxed_madd",
  "relaxed_nmadd",
  "relaxed_min",
  "abs",
  "neg",
  "relaxed_max",
  "sqrt",
  "add",
  "sub",
  "mul",
  "div",
  "min",
  "max",
  "pmin",
  "pmax",
  "convert_low_i32x4_s",
  "convert_low_i32x4_u",
] as const

export const v128_op0 = [
  "load",
  "load8x8_s",
  "load8x8_u",
  "load16x4_s",
  "load16x4_u",
  "load32x2_s",
  "load32x2_u",
  "load8_splat",
  "load16_splat",
  "load32_splat",
  "load64_splat",
  "store",
  "const",
  "not",
  "and",
  "andnot",
  "or",
  "xor",
  "bitselect",
  "any_true",
  "load8_lane",
  "load16_lane",
  "load32_lane",
  "load64_lane",
  "store8_lane",
  "store16_lane",
  "store32_lane",
  "store64_lane",
  "load32_zero",
  "load64_zero",
]

export const stmt_ops = ["select", "nop", "drop", "unreachable"] as const

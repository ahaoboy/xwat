import { expect, test } from "vitest"
import init from "../wasm/index"

test("Vec2", () => {
  const { vec2 } = init()
  const v = vec2.create()
  vec2.set(v, 1, 2)
  const v2 = vec2.clone(v)
  expect(vec2.toValues(v2)).toEqual([1, 2])
})

test("Vec2 add", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1, 2)
  const b = vec2.create()
  vec2.set(b, 3, 4)
  const out = vec2.create()
  vec2.add(out, a, b)
  expect(vec2.toValues(out)).toEqual([4, 6])
})

test("Vec2 sub", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.5, 2.5)
  const b = vec2.create()
  vec2.set(b, 3, 5)
  const out = vec2.create()
  vec2.subtract(out, a, b)
  expect(vec2.toValues(out)).toEqual([-1.5, -2.5])
})
test("Vec2 mul", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.5, 2.5)
  const b = vec2.create()
  vec2.set(b, 3, 5)
  const out = vec2.create()
  vec2.multiply(out, a, b)
  expect(vec2.toValues(out)).toEqual([4.5, 12.5])
})
test("Vec2 div", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.5, 2.5)
  const b = vec2.create()
  vec2.set(b, 3, 5)
  const out = vec2.create()
  vec2.divide(out, a, b)
  expect(vec2.toValues(out)).toEqual([0.5, 0.5])
})
test("Vec2 ceil", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.5, 2.5)
  const out = vec2.create()
  vec2.ceil(out, a)
  expect(vec2.toValues(out)).toEqual([2, 3])
})
test("Vec2 floor", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.5, 2.5)
  const out = vec2.create()
  vec2.floor(out, a)
  expect(vec2.toValues(out)).toEqual([1, 2])
})
test("Vec2 round", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1.4, 2.6)
  const out = vec2.create()
  vec2.round(out, a)
  expect(vec2.toValues(out)).toEqual([1, 3])
})
test("Vec2 min", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1, 6)
  const out = vec2.create()
  const b = vec2.create()
  vec2.set(b, 3, 5)
  vec2.min(out, a, b)
  expect(vec2.toValues(out)).toEqual([1, 5])
})
test("Vec2 max", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1, 6)
  const out = vec2.create()
  const b = vec2.create()
  vec2.set(b, 3, 5)
  vec2.max(out, a, b)
  expect(vec2.toValues(out)).toEqual([3, 6])
})
test("Vec2 scale", () => {
  const { vec2 } = init()
  const a = vec2.create()
  const out = vec2.create()
  vec2.set(a, 1, 6)
  vec2.scale(out, a, 2)
  expect(vec2.toValues(out)).toEqual([2, 12])
})
test("Vec2 scaleAndAdd", () => {
  const { vec2 } = init()
  const a = vec2.create()
  const out = vec2.create()
  vec2.set(a, 1, 6)
  const b = vec2.create()
  vec2.set(b, 2, 3)

  const scale = 4
  vec2.scaleAndAdd(out, a, b, scale)
  expect(vec2.toValues(out)).toEqual([6, 22])
})

test("Vec2 distance", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1, 6)
  const b = vec2.create()
  vec2.set(b, 4, 10)
  const d = vec2.distance(a, b)
  expect(d).toEqual(5)
})
test("Vec2 squaredDistance", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 1, 6)
  const b = vec2.create()
  vec2.set(b, 4, 10)
  const d = vec2.squaredDistance(a, b)
  expect(d).toEqual(25)
})
test("Vec2 length", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 3, 4)
  const d = vec2.length(a)
  expect(d).toEqual(5)
})
test("Vec2 squaredLength", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 3, 4)
  const d = vec2.squaredLength(a)
  expect(d).toEqual(25)
})
test("Vec2 inverse", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 2, 4)
  const out = vec2.create()

  vec2.inverse(out, a)
  expect(vec2.toValues(out)).toEqual([0.5, 0.25])
})
test("Vec2 negate", () => {
  const { vec2 } = init()
  const a = vec2.create()
  vec2.set(a, 2, 4)
  const out = vec2.create()

  vec2.negate(out, a)
  expect(vec2.toValues(out)).toEqual([-2, -4])
})
